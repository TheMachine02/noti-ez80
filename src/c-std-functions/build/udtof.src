	section	.text
	assume	adl = 1
	section	.text
	public	__u_dtof
__u_dtof:
	ld	hl, -14
	call	__frameset
	ld	a, (___print_fmt+6)
	ld	d, a
	cp	a, 0
	call	__setflag
	jq	p, BB0_2
	ld	d, 6
	ld	a, d
	ld	(___print_fmt+6), a
BB0_2:
	ld	iy, (ix + 6)
	ld	e, (ix + 9)
	ld	bc, __info
	ld	a, (___print_fmt+5)
	cp	a, 0
	call	__setflag
	jq	p, BB0_4
	ld	hl, ___print_fmt+1
	set	0, (hl)
	neg
	ld	(___print_fmt+5), a
BB0_4:
	or	a, a
	sbc	hl, hl
	ld	(ix + -11), d
	ld	l, d
	inc	hl
	ld	(ix + -3), hl
	push	bc
	ld	l, e
	push	hl
	push	iy
	call	__u_flt_info
	pop	hl
	pop	hl
	pop	hl
	ld	a, (___print_fmt+4)
	cp	a, 102
	jq	nz, BB0_7
	ld	a, (__info+1)
	cp	a, 1
	call	__setflag
	ld	iy, (ix + -3)
	lea	bc, iy + 0
	ld	d, 0
	jq	m, BB0_8
	ld	e, 0
	or	a, a
	sbc	hl, hl
	ld	l, a
	lea	bc, iy + 0
	ld	a, e
	call	__ladd
	push	hl
	pop	bc
	ld	d, e
	jq	BB0_8
BB0_7:
	ld	iy, (ix + -3)
	lea	bc, iy + 0
	ld	d, 0
BB0_8:
	ld	hl, 6
	ld	e, 0
	ld	a, d
	call	__lcmpu
	call	__setflag
	jq	m, BB0_10
	ld	a, 0
	jq	BB0_11
BB0_10:
	ld	a, 1
BB0_11:
	bit	0, a
	jq	z, BB0_14
	ld	c, 7
BB0_14:
	ld	hl, __info
	push	bc
	push	hl
	call	__u_flt_rnd
	pop	hl
	pop	hl
	ld	a, (___print_fmt+4)
	ld	(ix + -10), a
	cp	a, 102
	ld	e, 1
	ld	h, 0
	ld	l, e
	jq	z, BB0_17
	ld	l, h
BB0_17:
	ld	a, (__info+1)
	ld	d, a
	cp	a, 1
	call	__setflag
	ld	bc, (ix + -3)
	jq	p, BB0_19
	ld	e, h
BB0_19:
	ld	a, l
	and	a, e
	bit	0, a
	ld	l, d
	jq	nz, BB0_21
	ld	l, 0
BB0_21:
	ld	iy, 2
	ld	a, l
	add	a, c
	ld	e, a
	ld	a, (__info)
	ld	c, a
	ld	a, (___print_fmt+1)
	bit	0, c
	ld	(ix + -4), e
	ld	(ix + -14), l
	ld	(ix + -3), c
	jq	nz, BB0_24
	lea	bc, iy + 0
	ld	iy, 0
	ld	iyl, a
	lea	hl, iy + 0
	call	__iand
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	nz, BB0_25
	ld	c, 3
	lea	hl, iy + 0
	call	__ishl
	ld	bc, 32
	call	__iand
	jq	BB0_26
BB0_24:
	ld	hl, 45
	jq	BB0_26
BB0_25:
	ld	hl, 43
BB0_26:
	ld	e, 0
	ld	iy, ___print_buff
	bit	6, a
	ld	(ix + -7), d
	jq	nz, BB0_30
	call	__lcmpzero
	jq	z, BB0_31
	ld	e, 0
	jq	BB0_32
BB0_30:
	lea	bc, iy + 0
	ld	iy, ___print_leading_char
	jq	BB0_35
BB0_31:
	ld	e, 1
BB0_32:
	bit	0, e
	jq	z, BB0_34
	ld	de, 0
	jq	BB0_37
BB0_34:
	ld	de, ___print_buff+1
	push	de
	pop	bc
BB0_35:
	ld	de, 0
	ld	(iy), l
	push	bc
	pop	iy
BB0_37:
	ld	l, (ix + -3)
	ld	e, l
	push	de
	pop	hl
	ld	bc, 2
	call	__iand
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	nz, BB0_47
	ld	bc, 4
	ex	de, hl
	call	__iand
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	nz, BB0_49
	ld	hl, 1
	ld	a, (ix + -10)
	cp	a, 101
	jq	nz, BB0_53
	ld	a, (__info+2)
	add	a, 48
	ld	(iy), a
	lea	de, iy + 2
	ld	(ix + -3), de
	ld	(iy + 1), 46
	ld	a, (ix + -14)
	add	a, (ix + -11)
	ld	d, a
	ld	e, 0
BB0_42:
	ld	a, d
	cp	a, 1
	call	__setflag
	jq	m, BB0_54
	push	hl
	pop	iy
	ld	bc, 10
	xor	a, a
	call	__lcmpu
	ld	a, 1
	jq	nc, BB0_45
	ld	a, 0
BB0_45:
	bit	0, a
	jq	nz, BB0_54
	lea	hl, iy + 0
	ld	(ix + -10), iy
	ld	bc, 1
	xor	a, a
	call	__ladd
	ld	iy, __info+2
	ld	bc, (ix + -10)
	add	iy, bc
	ld	a, (iy)
	ld	iy, (ix + -3)
	add	a, 48
	ld	(iy), a
	inc	iy
	ld	(ix + -3), iy
	dec	d
	jq	BB0_42
BB0_47:
	bit	5, a
	jq	nz, BB0_51
	ld	hl, L_.str.1
	jq	BB0_52
BB0_49:
	bit	5, a
	jq	nz, BB0_59
	ld	hl, L_.str.3
	jq	BB0_52
BB0_51:
	ld	hl, L_.str
	jq	BB0_52
BB0_53:
	ld	(ix + -3), iy
	jq	BB0_55
BB0_54:
	ld	a, (___print_fmt+4)
BB0_55:
	ld	de, 0
	cp	a, 102
	jq	nz, BB0_84
	ld	e, -1
	ld	c, (ix + -7)
	ld	a, c
	cp	a, 0
	call	__setflag
	jq	p, BB0_61
	ld	hl, (ix + -3)
	ld	(hl), 48
	inc	hl
	ld	(ix + -3), hl
	ld	l, (ix + -4)
	dec	l
	jq	BB0_62
BB0_59:
	ld	hl, L_.str.2
BB0_52:
	push	hl
	push	iy
	call	_strcpy
	pop	hl
	pop	hl
	jq	BB0_109
BB0_61:
	ld	l, (ix + -4)
BB0_62:
	ld	a, e
	ld	(ix + -4), l
	sub	a, l
	ld	(ix + -11), a
	ld	iyl, 1
	ld	e, 0
	ld	iyh, e
	or	a, a
	sbc	hl, hl
	ld	(ix + -10), hl
BB0_63:
	ld	a, c
	add	a, iyh
	ld	d, a
	call	__setflag
	jq	m, BB0_68
	ld	hl, (ix + -10)
	ld	bc, 10
	xor	a, a
	call	__lcmpu
	ld	a, iyl
	jq	nc, BB0_66
	ld	a, 0
BB0_66:
	bit	0, a
	jq	nz, BB0_68
	ld	hl, (ix + -10)
	ld	bc, 1
	xor	a, a
	call	__ladd
	ld	(ix + -14), hl
	ex	de, hl
	ld	e, iyh
	ex	de, hl
	ld	d, iyl
	ld	iy, __info+2
	ld	bc, (ix + -10)
	add	iy, bc
	ld	a, (iy)
	ld	iy, (ix + -3)
	add	a, 48
	ld	(iy), a
	inc	iy
	ld	(ix + -3), iy
	ld	iyl, d
	ex	de, hl
	ld	iyh, e
	ex	de, hl
	dec	iyh
	ld	a, (ix + -11)
	add	a, 2
	ld	(ix + -11), a
	ld	hl, (ix + -14)
	ld	(ix + -10), hl
	ld	c, (ix + -7)
	jq	BB0_63
BB0_68:
	ld	hl, (ix + -3)
	ld	(___print_fmt+16), hl
	ld	h, -1
	ld	a, h
	ld	c, (ix + -7)
	sub	a, c
	ld	iyl, a
	ld	a, (ix + -4)
	add	a, iyh
	ld	b, a
	ld	a, d
	cp	a, 0
	call	__setflag
	jq	m, BB0_70
	ld	a, c
	add	a, iyh
	ld	l, a
	inc	l
	ld	a, l
	ld	(___print_fmt+13), a
	ld	a, b
	sub	a, l
	ld	b, a
	ld	hl, (ix + -3)
	ld	(hl), 46
	jq	BB0_75
BB0_70:
	ld	c, h
	ld	hl, (ix + -3)
	ld	(hl), 46
	ld	a, iyl
	cp	a, iyh
	jq	z, BB0_75
	ld	a, c
	ld	l, (ix + -7)
	sub	a, l
	sub	a, iyh
	cp	a, b
	call	__setflag
	jq	p, BB0_74
	ld	(___print_fmt+14), a
	ld	a, l
	sub	a, (ix + -11)
	ld	b, a
	jq	BB0_75
BB0_74:
	ld	a, b
	ld	(___print_fmt+14), a
	ld	b, 0
BB0_75:
	ld	hl, (ix + -3)
	inc	hl
	ld	(ix + -3), hl
	ld	d, 1
	ld	iyl, 0
BB0_76:
	ld	a, b
	cp	a, 1
	call	__setflag
	jq	m, BB0_81
	ld	(ix + -4), b
	ld	hl, (ix + -10)
	ld	bc, 10
	xor	a, a
	call	__lcmpu
	ld	a, d
	jq	nc, BB0_79
	ld	a, iyl
BB0_79:
	bit	0, a
	ld	b, (ix + -4)
	jq	nz, BB0_81
	ld	hl, (ix + -10)
	ld	bc, 1
	xor	a, a
	call	__ladd
	ld	(ix + -7), hl
	ex	de, hl
	ld	e, iyl
	ex	de, hl
	ld	iy, __info+2
	ld	bc, (ix + -10)
	add	iy, bc
	ld	a, (iy)
	ld	iy, (ix + -3)
	ld	b, (ix + -4)
	add	a, 48
	ld	(iy), a
	dec	b
	inc	iy
	ld	(ix + -3), iy
	ex	de, hl
	ld	iyl, e
	ex	de, hl
	ld	hl, (ix + -7)
	ld	(ix + -10), hl
	jq	BB0_76
BB0_81:
	ld	a, b
	cp	a, 1
	call	__setflag
	jq	m, BB0_83
	ld	a, b
	ld	(___print_fmt+15), a
BB0_83:
	ld	de, 0
BB0_84:
	ld	a, (___print_fmt+1)
	ld	(ix + -4), a
	cp	a, 0
	call	__setflag
	jq	p, BB0_94
	xor	a, a
	ld	(___print_fmt+15), a
	ld	hl, (ix + -3)
	inc	hl
	ld	(ix + -3), hl
BB0_86:
	ld	iy, (ix + -3)
	ld	a, (iy + -2)
	dec	iy
	ld	(ix + -3), iy
	cp	a, 48
	jq	z, BB0_86
	cp	a, 46
	jq	z, BB0_90
	ld	a, 0
	jq	BB0_91
BB0_90:
	ld	a, 1
BB0_91:
	ld	l, 1
	xor	a, l
	bit	0, a
	jq	nz, BB0_94
	xor	a, a
	ld	(___print_fmt+14), a
BB0_94:
	ld	iy, (ix + -3)
	ld	a, (iy + -1)
	cp	a, 46
	jq	nz, BB0_102
	ld	a, (___print_fmt+14)
	push	de
	pop	bc
	ld	c, a
	ld	a, (___print_fmt+15)
	ld	e, a
	or	a, a
	sbc	hl, hl
	or	a, a
	sbc	hl, de
	push	hl
	pop	de
	push	bc
	pop	hl
	or	a, a
	sbc	hl, de
	jq	nz, BB0_102
	bit	3, (ix + -4)
	jq	nz, BB0_102
	ld	hl, (ix + -3)
	dec	hl
	ld	(ix + -3), hl
BB0_102:
	ld	a, (___print_fmt+4)
	cp	a, 101
	jq	nz, BB0_105
	ld	a, (ix + -4)
	and	a, 32
	xor	a, 101
	ld	e, a
	ld	a, (__info+1)
	ld	hl, (ix + -3)
	ld	(hl), e
	cp	a, 0
	call	__setflag
	jq	p, BB0_106
	ld	iy, (ix + -3)
	ld	(iy + 1), 45
	neg
	jq	BB0_107
BB0_105:
	ld	hl, (ix + -3)
	jq	BB0_108
BB0_106:
	ld	iy, (ix + -3)
	ld	(iy + 1), 43
BB0_107:
	ld	l, a
	rlc	l
	sbc	hl, hl
	push	hl
	pop	de
	ld	e, a
	ld	bc, 10
	push	de
	pop	hl
	call	__idivs
	ld	a, l
	add	a, 48
	ld	iy, (ix + -3)
	ld	(iy + 2), a
	call	__imulu
	push	hl
	pop	bc
	ex	de, hl
	or	a, a
	sbc	hl, bc
	ld	a, l
	add	a, 48
	lea	hl, iy + 4
	ld	(iy + 3), a
BB0_108:
	ld	(hl), 0
BB0_109:
	ld	sp, ix
	pop	ix
	ret
	section	.text

	section	.bss
	public	__info
__info:
	rb	12

	section	.rodata
	private	L_.str
L_.str:
	db	73
	db	78
	db	70
	db	0

	section	.rodata
	private	L_.str.1
L_.str.1:
	db	105
	db	110
	db	102
	db	0

	section	.rodata
	private	L_.str.2
L_.str.2:
	db	78
	db	65
	db	78
	db	0

	section	.rodata
	private	L_.str.3
L_.str.3:
	db	110
	db	97
	db	110
	db	0

	extern	__idivs
	extern	__setflag
	extern	__frameset
	extern	__iand
	extern	__u_flt_rnd
	extern	___print_leading_char
	extern	_strcpy
	extern	__lcmpzero
	extern	__imulu
	extern	_llvm.stackprotector
	extern	___print_fmt
	extern	__u_flt_info
	extern	___print_buff
	extern	__lcmpu
	extern	__ishl
	extern	__ladd
