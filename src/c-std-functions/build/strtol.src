	section	.text
	assume	adl = 1
	section	.text
	public	_strtol
_strtol:
	ld	hl, -27
	call	__frameset
	ld	de, (ix + 6)
BB0_1:
	ld	(ix + -6), de
	ex	de, hl
	ld	(ix + -3), hl
	ld	a, (hl)
	ld	l, a
	rlc	l
	sbc	hl, hl
	ld	l, a
	push	hl
	call	_isspace
	pop	de
	ld	de, (ix + -6)
	inc	de
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	nz, BB0_1
	ld	iy, (ix + -3)
	ld	a, (iy)
	cp	a, 43
	jq	nz, BB0_4
	push	de
	pop	iy
	or	a, a
	sbc	hl, hl
	push	hl
	pop	bc
	ld	de, (ix + 12)
	jq	BB0_6
BB0_4:
	ld	(ix + -6), de
	cp	a, 45
	ld	hl, 0
	push	hl
	pop	bc
	ld	de, (ix + 12)
	jq	nz, BB0_6
	ld	iy, (ix + -6)
	ld	bc, 1
BB0_6:
	push	de
	pop	hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	ld	(ix + -18), bc
	ld	(ix + -3), iy
	jq	nz, BB0_10
	ld	a, (iy)
	cp	a, 48
	jq	nz, BB0_15
	ld	a, (iy + 1)
	cp	a, 88
	jq	z, BB0_19
	cp	a, 120
	jq	z, BB0_19
	ld	iy, 8
	jq	BB0_21
BB0_10:
	push	de
	pop	hl
	ld	bc, 16
	or	a, a
	sbc	hl, bc
	jq	nz, BB0_16
	ld	a, (iy)
	cp	a, 48
	jq	nz, BB0_19
	ld	a, (iy + 1)
	cp	a, 120
	ld	hl, 16
	ld	(ix + -12), hl
	ld	hl, (ix + -18)
	jq	z, BB0_24
	cp	a, 88
	ld	l, 1
	jq	z, BB0_22
	ld	a, 0
	jq	BB0_23
BB0_19:
	ld	hl, 16
	ld	(ix + -12), hl
	jq	BB0_26
BB0_15:
	ld	iy, 10
BB0_21:
	ld	(ix + -12), iy
	jq	BB0_26
BB0_16:
	ld	(ix + -12), de
	jq	BB0_26
BB0_22:
	ld	a, 1
BB0_23:
	xor	a, l
	bit	0, a
	jq	nz, BB0_26
BB0_24:
	ld	iy, (ix + -3)
	lea	iy, iy + 2
	ld	(ix + -3), iy
BB0_26:
	ld	c, 16
	ld	hl, (ix + -12)
	call	__ishl
	call	__ishrs
	ld	(ix + -24), hl
	or	a, a
	sbc	hl, hl
	xor	a, a
	ld	(ix + -6), a
BB0_27:
	ld	(ix + -9), hl
	ld	hl, (ix + -3)
	ld	(ix + -21), hl
	ld	a, (hl)
	ld	l, a
	rlc	l
	sbc	hl, hl
	ld	l, a
	push	hl
	call	_toupper
	pop	de
	ld	a, l
	cp	a, 65
	call	__setflag
	ld	a, -55
	jq	p, BB0_29
	ld	a, -48
BB0_29:
	add	a, l
	call	__setflag
	ld	iy, (ix + 9)
	jq	m, BB0_37
	or	a, a
	sbc	hl, hl
	ld	(ix + -15), hl
	ld	l, a
	push	hl
	pop	bc
	ld	de, (ix + -24)
	or	a, a
	sbc	hl, de
	call	__setflag
	jq	p, BB0_37
	ld	hl, (ix + -12)
	push	hl
	pop	iy
	add	iy, iy
	push	hl
	pop	iy
	sbc	hl, hl
	ld	(ix + -27), hl
	ld	hl, (ix + -9)
	ld	d, (ix + -6)
	ld	e, d
	ld	(ix + -3), bc
	ld	(ix + -12), iy
	lea	bc, iy + 0
	ld	iy, (ix + -27)
	ld	a, iyl
	call	__lmulu
	xor	a, a
	ld	bc, (ix + -3)
	call	__ladd
	ld	bc, (ix + -9)
	ld	a, d
	call	__lcmpu
	call	__setflag
	ld	a, 1
	jq	p, BB0_33
	ld	a, 0
BB0_33:
	ld	bc, (ix + -21)
	inc	bc
	ld	(ix + -3), bc
	bit	0, a
	ld	(ix + -6), e
	jq	nz, BB0_27
	ld	bc, (ix + -18)
	push	bc
	pop	hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	z, BB0_38
	ld	a, 0
	jq	BB0_39
BB0_37:
	ld	hl, (ix + -9)
	ld	(ix + -15), hl
	ld	bc, (ix + -18)
BB0_48:
	lea	hl, iy + 0
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	z, BB0_61
	ld	hl, (ix + 12)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	nz, BB0_58
	ld	hl, (ix + -21)
BB0_51:
	push	hl
	pop	de
	ld	a, (hl)
	cp	a, 76
	jq	z, BB0_57
	cp	a, 104
	jq	z, BB0_57
	cp	a, 117
	jq	z, BB0_57
	cp	a, 108
	ld	a, 1
	jq	z, BB0_56
	ld	a, 0
BB0_56:
	ld	l, 1
	xor	a, l
	bit	0, a
	jq	nz, BB0_60
BB0_57:
	ex	de, hl
	inc	hl
	jq	BB0_51
BB0_58:
	ld	de, (ix + -21)
BB0_60:
	ld	(iy), de
BB0_61:
	push	bc
	pop	hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	z, BB0_63
	ld	d, 0
	jq	BB0_64
BB0_63:
	ld	d, 1
BB0_64:
	ld	a, (ix + -6)
	ld	bc, (ix + -15)
	or	a, a
	sbc	hl, hl
	ld	e, 0
	call	__lsub
	bit	0, d
	jq	nz, BB0_67
	push	hl
	pop	bc
BB0_67:
	bit	0, d
	jq	nz, BB0_69
	ld	a, e
BB0_69:
	push	bc
	pop	hl
	ld	e, a
	ld	sp, ix
	pop	ix
	ret
BB0_38:
	ld	a, 1
BB0_39:
	ld	iy, (ix + 9)
	bit	0, a
	jq	z, BB0_43
	ld	hl, -1
	ld	(ix + -15), hl
BB0_43:
	bit	0, a
	jq	nz, BB0_45
	ld	a, -128
	jq	BB0_46
BB0_45:
	ld	a, 127
BB0_46:
	ld	(ix + -6), a
	ld	hl, 5
	ld	(_errno), hl
	jq	BB0_48
	section	.text

	extern	__setflag
	extern	_toupper
	extern	__frameset
	extern	__lcmpu
	extern	_errno
	extern	_llvm.stackprotector
	extern	_isspace
	extern	__ishrs
	extern	__lmulu
	extern	__ishl
	extern	__ladd
	extern	__lsub
