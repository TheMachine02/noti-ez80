	section	.text
	assume	adl = 1
	section	.text
	public	__u_dtoe
__u_dtoe:
	ld	hl, -11
	call	__frameset
	ld	iy, (ix + 6)
	ld	c, (ix + 9)
	ld	de, __info
	ld	a, (___print_fmt+6)
	ld	l, a
	rlc	l
	sbc	hl, hl
	ld	(ix + -11), a
	ld	l, a
	inc	hl
	ld	(ix + -6), hl
	push	de
	ld	l, c
	push	hl
	push	iy
	call	__u_flt_info
	pop	hl
	pop	hl
	pop	hl
	ld	de, 6
	ld	bc, (ix + -6)
	push	bc
	pop	hl
	or	a, a
	sbc	hl, de
	jq	c, BB0_2
	ld	bc, 6
BB0_2:
	push	bc
	ld	hl, __info
	push	hl
	call	__u_flt_rnd
	pop	hl
	pop	hl
	ld	a, (__info)
	cp	a, 1
	jq	nz, BB0_4
	ld	a, 45
	jq	BB0_9
BB0_4:
	ld	a, (___print_fmt+1)
	ld	de, 0
	ld	e, a
	ld	bc, 2
	push	de
	pop	hl
	call	__iand
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	nz, BB0_7
	ld	bc, 8
	ex	de, hl
	call	__iand
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	nz, BB0_8
	ld	iy, ___print_buff
	jq	BB0_10
BB0_7:
	ld	a, 43
	jq	BB0_9
BB0_8:
	ld	a, 32
BB0_9:
	ld	iy, ___print_buff+1
	ld	(___print_buff), a
BB0_10:
	ld	a, (__info+2)
	add	a, 48
	ld	(iy), a
	ld	a, (___print_fmt+6)
	or	a, a
	jq	nz, BB0_12
	inc	iy
	jq	BB0_13
BB0_12:
	lea	hl, iy + 2
	ld	(iy + 1), 46
	push	hl
	pop	iy
BB0_13:
	ld	(ix + -9), iy
	ld	hl, 1
	ld	d, 1
	ld	(ix + -3), hl
	ld	e, 0
BB0_14:
	ld	bc, (ix + -6)
	push	bc
	pop	hl
	push	bc
	pop	iy
	add	iy, iy
	sbc	hl, hl
	push	hl
	pop	iy
	ld	hl, (ix + -3)
	ld	(ix + -10), e
	ld	a, iyl
	call	__lcmpu
	ld	a, d
	jq	nc, BB0_16
	ld	a, 0
BB0_16:
	bit	0, a
	ld	iy, (ix + -9)
	jq	nz, BB0_18
	ld	de, (ix + -3)
	push	de
	pop	hl
	ld	bc, 255
	call	__iand
	push	hl
	pop	bc
	ld	hl, __info+2
	add	hl, bc
	ld	a, (hl)
	add	a, 48
	ld	(iy), a
	inc	iy
	ld	(ix + -9), iy
	ex	de, hl
	ld	d, 1
	ld	e, (ix + -10)
	ld	bc, 1
	xor	a, a
	call	__ladd
	ld	(ix + -3), hl
	jq	BB0_14
BB0_18:
	ld	a, (___print_fmt+1)
	and	a, 8
	ld	l, a
	or	a, a
	jq	nz, BB0_26
	ld	a, (___print_fmt+4)
	cp	a, 103
	jq	z, BB0_24
	cp	a, 71
	jq	z, BB0_22
	ld	a, 0
	jq	BB0_23
BB0_22:
	ld	a, 1
BB0_23:
	ld	e, 1
	xor	a, e
	bit	0, a
	jq	nz, BB0_26
BB0_24:
	lea	hl, iy + 0
	dec	iy
	ld	(ix + -3), hl
	lea	de, iy + 0
	push	hl
	pop	iy
	ld	a, (iy + -1)
	cp	a, 46
	jq	z, BB0_31
	cp	a, 48
	push	de
	pop	iy
	jq	z, BB0_24
	jq	BB0_32
BB0_26:
	ld	a, (ix + -11)
	or	a, a
	jq	nz, BB0_30
	ld	a, l
	or	a, a
	jq	nz, BB0_30
	dec	iy
BB0_30:
	ld	(ix + -3), iy
	jq	BB0_32
BB0_31:
	ld	(ix + -3), de
BB0_32:
	ld	a, (___print_fmt+4)
	ld	l, a
	rlc	l
	sbc	hl, hl
	ld	l, a
	push	hl
	call	_isupper
	pop	de
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	z, BB0_34
	ld	a, 69
	jq	BB0_35
BB0_34:
	ld	a, 101
BB0_35:
	ld	hl, (ix + -3)
	ld	(ix + -3), hl
	ld	(hl), a
	ld	a, (__info+1)
	cp	a, 0
	call	__setflag
	jq	p, BB0_37
	ld	l, a
	rlc	l
	sbc	hl, hl
	push	hl
	pop	bc
	ld	c, a
	push	bc
	pop	hl
	push	bc
	pop	iy
	add	iy, iy
	sbc	hl, hl
	ld	(ix + -6), hl
	ld	iy, (ix + -3)
	ld	(iy + 1), 45
	or	a, a
	sbc	hl, hl
	ld	e, 0
	ld	iy, (ix + -6)
	ld	a, iyl
	call	__lsub
	ld	(ix + -6), hl
	ld	iy, (ix + -3)
	jq	BB0_38
BB0_37:
	ld	l, a
	rlc	l
	sbc	hl, hl
	ld	l, a
	ld	(ix + -6), hl
	push	hl
	pop	iy
	add	iy, iy
	sbc	hl, hl
	push	hl
	pop	de
	ld	iy, (ix + -3)
	ld	(iy + 1), 43
BB0_38:
	ld	bc, 10
	xor	a, a
	ld	hl, (ix + -6)
	ld	(ix + -9), de
	ld	d, a
	call	__ldivs
	ld	a, l
	add	a, 48
	ld	(iy + 2), a
	ld	a, d
	call	__lmulu
	push	hl
	pop	bc
	ld	a, e
	ld	hl, (ix + -6)
	ld	de, (ix + -9)
	call	__lsub
	ld	a, l
	add	a, 48
	lea	hl, iy + 4
	ld	(iy + 3), a
	ld	(iy + 4), 0
	ld	sp, ix
	pop	ix
	ret
	section	.text

	section	.bss
	public	__info
__info:
	rb	12

	extern	__ldivs
	extern	__u_flt_info
	extern	__setflag
	extern	_isupper
	extern	___print_buff
	extern	__frameset
	extern	__iand
	extern	__u_flt_rnd
	extern	__lcmpu
	extern	_llvm.stackprotector
	extern	__lmulu
	extern	___print_fmt
	extern	__ladd
	extern	__lsub
